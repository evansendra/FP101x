ex0

sum100 = sum [x ^ 2 | x <- [1..100]]

ex1

replicate n a = [a | _ <- [1..n]]

ex2

pyths n 
    = [(x,y,z) | x <- [1..n], y <- [1..n], z <- [1..n],
       x ^ 2 + y ^ 2 == z ^ 2]

ex3

perfects n = [x | x <- [1 .. n], isPerfect n]
    where isPerfect num = sum (init (factors num)) == num

ex4

// ?? why ]] then another ]] at the end when only [[ in beginning ??

concat [[(x,y) | y <- [4,5,6]] | x <- [1,2,3]]

ex5

positions x xs = find x (zip xs [0 .. n])
    where n = length xs - 1

ex6

scalarproduct xs ys = sum [x * y | (x, y) <- xs `zip` ys]

ex7

import Data.Char

let2int :: Char -> Int
let2int c 
    | isLower c = ord c - ord 'a'
    | otherwise = ord c - ord 'A'

int2let :: Int -> Char
int2let n  = chr (ord 'a' + n)

shift :: Int -> Char -> Char
shift n c
    | isLower c = int2let ((let2int c + n) `mod` 26)
    | isUpper c = toUpper (int2let ((let2int c + n) `mod` 26))
    | otherwise = c

encode :: Int  -> String -> String
encode n xs = [shift n x | x <- xs]

ex8

[(1,1),(1,2),(2,1),(2,2)]

ex9

[1,2,2,3,3,3]

ex10

30

ex11

xs = [1,2,3,...]

ex12

riffle xs ys = concat [ [x,y] | (x,y) <- xs `zip` ys]

ex13

divisors x = [d | d <- [1 .. x], x `divides` d]
