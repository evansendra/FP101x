Ex 0

m^0 = 1
m ^ n = m * m ^ (n - 1)

m ^ 0 = 1
m ^ n = m * (^) m (n - 1)

Ex 1


length [1,2,3]
= { applying length }
1 + length [2,3]
= { applying length }
1 + (1 + length [3])
= { applying length }
1 + (1 + (1 + length []))
= { applying length }
1 + (1 + (1 + 0))
= { applying + }
1 + (1 + 1)
= { applying + }
1 + 2
= { applying + }
3

Ex 2

drop 3 [1,2,3,4,5]
= { applying drop }
drop 2 [2,3,4,5]
= { applying drop }
drop 1 [3,4,5]
= { applying drop }
drop 0 [4,5]
= { applying drop }
[4,5]

Ex 3

init [1,2,3]
= { applying init }
1 : init [2,3]
= { applying init }
1 : 2 : init [3]
= { applying init }
1 : 2 : []
= { list notation }
[1,2]

Ex 4

and [] = True
and (b : bs) = b && and bs

and [] = True
and (b : bs)
    | b = and bs
    | otherwise = False

and [] = True
and (b : bs)
    | b == False = False
    | otherwise = and bs

and [] = True
and (b : bs) = and bs && b

Ex 5

concat [] = []
concat (xs : xss) = xs ++ concat xss

Ex 6

replicate 0 _ = []
replicate n x = x : replicate (n - 1) x

Ex 7

(x : _) = x
(_ : xs) = xs !! (n - 1)

Ex 8

elem _ [] = False
elem x (y : ys)
    | x == y = True
    | otherwise = elem x ys

Ex 9

merge [] ys = ys
merge xs [] = xs
merge (x : xs) (y : ys)
    = if x <= y then x : merge xs (y : ys) else y : merge (x : xs) ys

Ex 10

<???>

think the option of 

msort [] = []
msort xs = merge (msort zs) (msort ys)
    where (ys, zs) = halve xs

would also work here b/c it would still take the singleton case into account:

msort [1]
{ applying msort }
{ applying halve }
merge (msort []) (msort [1])
{ applying msort }
merge [] (msort [1])
{ applying msort }
{ applying halve }
merge [] (merge (msort []) (msort [1]))
{ applying msort }
merge [] (merge [] (msort [1]))

Ahhhh, nvm, I'm silly... tricky tricky :-)

</???>

msort [] = []
msort [x] = [x]
msort xs = merge (msort ys) (msort zs)
    where (ys, zs) = halve xs
