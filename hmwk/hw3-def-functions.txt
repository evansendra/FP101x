// TODO

ex0

halve xs = splitAt (length xs `div` 2) xs

halve xs = (take (n `div` 2) xs, drop (n `div` 2) xs)
    where n = length xs

halve xs = splitAt (div (length xs) 2) xs

halve xs = (take n xs, drop n xs)
    where n = length xs `div` 2

ex1

safetail xs = if null xs then [] else tail xs

safetail [] = []
safetail (_ : xs) = xs

safetail xs
    | null xs = []
    | otherwise = tail xs

safetail [] = []
safetail xs = tail xs

safetail
    = \ xs ->
        case xs of
            [] -> []
            (_ : xs) -> xs

ex2

all but:

b || c
    | b == c = True
    | otherwise = False

b || True = b
_ || True = True

ex3

True && True = True
_ && _ = False

a && b = if a then if b then True else False else False

a && b = if a then b else False

a && b = if b then a else False

ex4

mult = \ x -> (\ y -> (\ z -> x * y * z))


ex5

f x g y means:

((f x) g) y

ex6

f :: (a -> a) -> a takes as its argument a function

ex7

remove n xs = take n xs ++ drop (n + 1) xs

ex8

list with elt at x duplicated

