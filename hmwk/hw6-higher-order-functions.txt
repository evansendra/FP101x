ex0

map f (filter p xs)

ex1

all p xs = and (map p xs)
all p = and . map p
all p = not . any (not . p) -- lol
all p xs = foldl (&&) True (map p xs)
all p = foldr (&&) True . map p

ex2

any p = or . map p
any p xs = length (filter p xs) > 0
any p = not . null . dropWhile (not . p)
any p xs = not (all (\ x -> not (p x)) xs)
any p xs = foldr (\ x acc -> (p x) || acc) False xs

ex3

takeWhile _ [] = []
takeWhile p (x : xs)
    | p x = x : takeWhile p xs
    | otherwise = []

ex4

dropWhile _ [] = []
dropWhile p (x : xs)
    | p x = dropWhile p xs
    | otherwise = x : xs

ex5

map f = foldl (\ xs x -> xs ++ [f x]) []

ex6

filter p = foldr (\ x xs -> if p x then x : xs else xs) []

ex7

dec2int = foldl (\ x y -> 10 * x + y) 0

ex8

Def of sumsqreven doesn't even typecheck...particularly b/c of the [a -> a] bit

ex9

curry f = \ x y -> f (x, y)

ex10

uncurry f = \ (x, y) -> f x y

ex11

chop8 = unfold null (take 8) (drop 8)

ex12

map f = unfold null (f . head) tail

ex13

iterate f = unfold (const False) id f

ex14

f . (g . h) = (f . g) . h

ex15

[x] : xs = [x, xs]

ex16

filter p . filter p = filter p

ex17

reverse (map f xs) = map f (reverse xs)

ex18

reverse (xs ++ ys) = reverse ys ++ reverse xs

ex19

take 10 [1..]

ex20

that sum is higher order function

ex21

that map is an overloaded function

ex22

that foldr is overloaded

ex23

take is polymorphic

ex24

f x = x > 3 -- but why...because it restricts the type to Number class?

ex25

take 4 (iterate (+1) 1)

ex26

[2,4]

ex27

[(1,'a'),(2,'b')]

ex28

(-) 1 ((-) 2 ((-) 3 ((-) 4 (0))))
(-) 1 ((-) 2 (3 - 4))
(-) 1 (3)
-2

ex29

[2,4,6]

ex30

[f x|x <- xs, p (f x)]

ex31

cExp (CNat a) (CNat b) = CNat (b a) -- kinda skipped this one